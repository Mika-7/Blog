<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MIKA</title>
  
  <subtitle>人海茫茫，道阻且长</subtitle>
  <link href="http://mika-7.github.io/atom.xml" rel="self"/>
  
  <link href="http://mika-7.github.io/"/>
  <updated>2021-11-30T10:49:48.504Z</updated>
  <id>http://mika-7.github.io/</id>
  
  <author>
    <name>Mika</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git命令快速指北</title>
    <link href="http://mika-7.github.io/2021/11/27/Git%E5%91%BD%E4%BB%A4%E5%BF%AB%E9%80%9F%E6%8C%87%E5%8C%97/"/>
    <id>http://mika-7.github.io/2021/11/27/Git%E5%91%BD%E4%BB%A4%E5%BF%AB%E9%80%9F%E6%8C%87%E5%8C%97/</id>
    <published>2021-11-26T16:00:00.000Z</published>
    <updated>2021-11-30T10:49:48.504Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;</p><span id="more"></span><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Git是分布式版本管理系统，什么意思呢？</p><ul><li><p>分布式:没有中心服务器，在本地即可完成提交代码</p></li><li><p>版本管理: 让代码跳转到某次提交的版本。</p><p>eg:<br>小明第一次学c语言写了个 hello.c ,输出<code>Hello World!</code>。但是第二天他学了新的知识，重写了 hello.c 并保存了,出了 bug。他现在想回到第一天的 hello.c ,但 ctrl+z 已经没有用了,因为小明已经保存了代码,这时 Git 便能再次实现撤回的效果,回滚到第一天的 hello.c</p><h3 id="Git中的术语"><a href="#Git中的术语" class="headerlink" title="Git中的术语"></a>Git中的术语</h3></li><li><p>工作区：文件管理器的目录</p></li><li><p>暂存区：叫 stage 或 index。  是.git/里面的 index 文件(.git/index)</p></li><li><p>版本库：当前目录/.git</p></li><li><p>远程仓库：github上创建的仓库</p></li><li><p>HEAD 指针:指向当前版本</p></li></ul><p>关系：工作区-&gt;暂存区-&gt;版本库</p><p>由工作区 add 到暂存区， 由暂存区 commit 到版本库</p><h3 id="指令速查"><a href="#指令速查" class="headerlink" title="指令速查"></a>指令速查</h3><ul><li><p>git init 在空目录中初始化仓库</p></li><li><p>git clone <a href="https://xxxx/">https://xxxx</a> </p></li><li><p>git status 粗略查看工作区状态</p></li><li><p>git diff 文件名 （详细查看修改细节）</p></li><li><p>git add 添加<br><code>git add fileName</code><br><code>git add --all</code> 新增和修改文件提交到暂存区</p></li><li><p>git commit 提交备注<br><code>git commit -m &quot;comments&quot;</code></p></li><li><p>git fetch &amp;&amp; git merge 拉取与合并<br><code>git fetch origin tag 远程标签名</code> 拉取远程标签<br><code>git merge 分支名</code> 合并本地某分支到当前分支<br>例如：将dev合并到master，先<code>checkout master </code>，然后<code>git merge dev</code></p></li><li><p>git pull<br><code>git pull origin 远程分支名</code> 相当于 fetch + merge</p></li><li><p>git push<br><code>git push -u origin 分支名(master)</code> 第一次push到仓库，set-upsteam,一次性推送本地master<br><code>git push origin 分支名|标签名</code>  推送至远程仓库 通常是写<code>git push origin master</code><br><code>git push --all origin</code>  推送所有 branch 至远程仓库<br><code>git push --tags</code>   推送所有 tag<br><code>git push origin --delete 分支名|标签名</code>  删除远程 branch 或 tag</p></li><li><p>git checkout 分支管理</p><p><code>git checkout 分支名</code>       仅切换分支(或<code>git switch 分支名</code>)<br><code>git checkout -- 文件名</code>    撤销修改工作区<br><code>git checkout -b 分支名</code>    创建一个新的分支并切换(或<code>git switch -c</code>)<br><code>git branch -m 旧名 新分支名</code>  重命名本地分支<br><code>git branch -a</code>      查看所有分支（本地，远程）<br><code>git branch 分支名</code>  查看本地分支<br><code>git branch -r 分支名</code>  查看 remote（远程）分支<br><code>git branch -d 分支名|标签名</code> 删除本地合并后的分支或标签<br><code>git branch -D 分支名|标签名</code> 强制删除本地分支或标签，不管是否合并</p></li></ul><ul><li><p>git cherry-up <commit-id> (同步某次commit的提交)</p></li><li><p>git tag 标签<br><code>git tag</code>   查看本地 tag<br><code>git show tag名</code>    查看单个 tag 详情<br><code>git tag 标签名</code>           创建 tag<br><code>git tag -a 标签名 -m 备注信息</code>  创建 tag 并备注<br><code>git tag -s 标签名 -m 备注信息</code>   创建 PGP密钥 tag，并备注<br><code>git -tag -d tag名</code> 删除tag<br><code>git push origin &lt;tagname&gt; </code>根据tag名推送</p></li><li><p>git reset<br><code>git reset HEAD 文件名</code> 撤销暂存区，回到工作区(撤销 git add 内容)</p></li><li><p>git remote<br><code>git remote add origin git@server-name:path/repo-name.git</code> 添加远程仓库关联<br><code>git remote rm origin </code> 删除远程仓库的关联</p></li></ul><h3 id="代码冲突解决"><a href="#代码冲突解决" class="headerlink" title="代码冲突解决"></a>代码冲突解决</h3><p>  无法使用 merge 进行直接合并，报错：合并冲突</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git merge feature1</span><br><span class="line">Auto-merging readme.txt</span><br><span class="line">CONFLICT (content): Merge conflict in readme.txt</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result</span><br></pre></td></tr></table></figure><p>  手动修改冲突文件的内容，git会以<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容</code><br>  编辑完冲突内容后,add,commit,最后再删除不需要的feature1分支<br>  <code>git branch -d feature1</code></p><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p>  <code>git log </code>查看提交记录，根据 commit id 进行后续回退</p><ul><li>soft（默认）<br><code>git reset --soft [commit id]</code><br>版本库的 HEAD 回滚到某个 commit ，但本地代码不变，处于未 commit 的状态。</li><li>hard<br><code>git reset --hard [commit id]</code><br>HEAD 和本地代码都回到某个 commit，后面的更改将会被丢弃。（约等于ctrl+z）<h3 id="远程推送失败"><a href="#远程推送失败" class="headerlink" title="远程推送失败"></a>远程推送失败</h3></li><li>git pull<br>若失败则将本地分支与远程分支建立关联<code>git branch --set-upstream-to=origin/&lt;分支名&gt; dev</code><br>然后 git pull，解决冲突，最后push<code>git push origin dev</code></li></ul><h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><p>在 Git 工作区的根目录下创建一个特殊的 .gitignore 文件，然后把要忽略的文件名填进去，Git 就会自动忽略这些文件。</p><p>GitHub 在线模板：<a href="https://github.com/github/gitignore">https://github.com/github/gitignore</a></p><p>忽略文件的原则是：</p><p>忽略操作系统自动生成的文件，比如缩略图等<br>忽略编译生成的中间文件、可执行文件等<br>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。</p><h3 id="Git-Bash-alias"><a href="#Git-Bash-alias" class="headerlink" title="Git Bash alias"></a>Git Bash alias</h3><ul><li><p>Git 下的 alias 别名<br>git config –global alias.别名 “原字符”<br>例如下面这样的魔鬼别名代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.lg &quot;log --color --graph </span><br><span class="line">--pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; </span><br><span class="line">--abbrev-commit&quot;</span><br></pre></td></tr></table></figure></li><li><p>bash 下的 alias 别名<br> 当然也可以如同在 Liunx 环境下编辑 bash 的配置文件<code>.bash_profile</code><br> 添加<code>alias ls=&quot;ls -al&quot;</code><br> 注意：<code>=</code>不能有空格</p></li></ul><p>附上我的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># generated by Git for Windows</span><br><span class="line">test -f ~/.profile &amp;&amp; . ~/.profile</span><br><span class="line">test -f ~/.bashrc &amp;&amp; . ~/.bashrc</span><br><span class="line">alias bashalias=&#x27;code ~/.bash_profile&#x27;</span><br><span class="line">alias bashcolor=&#x27;code ~/.minttyrc&#x27;</span><br><span class="line">alias bashconfig=&#x27;code /etc/profile.d/git-prompt.sh&#x27;</span><br><span class="line">alias gitconfig=&#x27;code ~/.gitconfig&#x27;</span><br><span class="line"></span><br><span class="line">alias .=&#x27;cd ~&#x27;</span><br><span class="line">alias ..=&#x27;cd ..&#x27;</span><br><span class="line">alias ...=&#x27;cd ../..&#x27;</span><br><span class="line">alias e=&#x27;exit&#x27;</span><br><span class="line">alias cls=&#x27;clear&#x27;</span><br><span class="line"></span><br><span class="line">alias gs=&#x27;git status&#x27;</span><br><span class="line">alias ga=&#x27;git add .&#x27;</span><br><span class="line">alias gc=&#x27;git commit -m&#x27;</span><br><span class="line">alias gp=&#x27;git push&#x27;</span><br><span class="line">alias gitauto=&#x27;git add . &amp;&amp; git commit -m &quot;auto deploy&quot; &amp;&amp; git push&#x27;</span><br><span class="line"></span><br><span class="line">alias sysoff=&#x27;shutdown -s -t 0&#x27;</span><br><span class="line">alias sysre=&#x27;shutdown -r -t 0&#x27;</span><br><span class="line"></span><br><span class="line">alias host=&#x27;code /c/Windows/System32/drivers/etc/hosts&#x27;</span><br><span class="line"></span><br><span class="line">alias yt=&#x27;you-get -o D:\\Video\\you-get&#x27;</span><br><span class="line">alias WK=&#x27;python D:\\code\\python\\ZhiHuiShu.py&#x27;</span><br><span class="line">alias h3=&#x27;hexo clean &amp;&amp; hexo generate &amp;&amp; hexo serve&#x27;</span><br><span class="line">alias h4=&#x27;hexo clean &amp;&amp; hexo generate &amp;&amp; hexo serve &amp;&amp; hexo deploy&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;emsp;&amp;emsp;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Stellar建站之路</title>
    <link href="http://mika-7.github.io/2021/11/09/Stellar%E5%BB%BA%E7%AB%99%E4%B9%8B%E8%B7%AF/"/>
    <id>http://mika-7.github.io/2021/11/09/Stellar%E5%BB%BA%E7%AB%99%E4%B9%8B%E8%B7%AF/</id>
    <published>2021-11-09T13:32:47.000Z</published>
    <updated>2021-11-30T10:51:47.886Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;</p><p>初探GitHubPage+hexo搭建博客</p><span id="more"></span><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在搭建博客的时候，难免会遇到些小细节会搞不清楚，网上查资料繁琐又有些过时，遂写下这篇文章记录下，供日后参考。  为什么我选择了hexo搭建，而不是wordpress。  一方面，我喜欢比较简洁博客，不需要太多花里胡哨的。  其次，搭建wordpress需要服务器，而使用 hexo 来搭建只需要利用好 Github 就可以搞定。<del>白嫖永远的神</del></p><h3 id="搭建流程"><a href="#搭建流程" class="headerlink" title="搭建流程"></a>搭建流程</h3><p>首先，利用hexo+github建站需要什么?注册好<a href="https://github.com/">GitHub</a>账号，会简单使用<code>Git Bash</code>，了解过markdown语法和yaml语法，善于利用搜索引擎。<del>以及不怕折腾的精神</del></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol><li><p>安装git bash<br>Git Bash<a href="https://git-scm.com/download">官网</a></p></li><li><p>安装node.js<br><a href="https://npm.taobao.org/mirrors/node">淘宝镜像站</a></p><p> 版本要求</p><table><thead><tr><th align="left">Hexo 版本</th><th align="left">Node.js 版本</th></tr></thead><tbody><tr><td align="left">5.0+</td><td align="left">最低10.13.0</td></tr></tbody></table></li><li><p>安装hexo<br>使用npm安装hexo-cli</p><div class="tag-plugin copy"><input class="copy-area" readonly id="copy_1" value="npm install -g hexo-cli"><button class="copy-btn" onclick="util.copy(&quot;copy_1&quot;,&quot;Copied!&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div></li><li><p>执行 Hexo：</p><ol><li><code>npx hexo  &lt;command&gt;</code></li><li>添加环境变量<br>将 Hexo 所在的目录下的 node_modules 添加到环境变量之中即可使用<code> hexo &lt;command&gt;</code></li></ol></li></ol><p>详细的github+hexo建站流程，网上也有很多，我在这就不赘述了。在这里贴下<a href="https://kchen.cc/2016/11/12/hexo-instructions/#%E4%BB%80%E4%B9%88%E6%98%AF-Hexo">KChen大佬写的教程</a>，写得十分详细，从基础搭建，到博客配置部署，以及Travis Cl持续集成。遇到有所疑惑的，也可到<a href="https://hexo.io/docs/">HEXO官网文档</a>解惑。</p><h4 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h4><p>hexo的主题我目前使用的是<a href="https://xaoxuu.com/wiki/stellar/">stellar</a></p><h5 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h5><ol><li>在git bash上运行以下代码</li></ol><div class="tag-plugin copy"><input class="copy-area" readonly id="copy_2" value="npm i hexo-theme-stellar"><button class="copy-btn" onclick="util.copy(&quot;copy_2&quot;,&quot;Copied!&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div><ol start="2"><li>修改blog/_config.yml文件中theme</li></ol><div class="tag-plugin copy"><input class="copy-area" readonly id="copy_3" value="theme: stallar"><button class="copy-btn" onclick="util.copy(&quot;copy_3&quot;,&quot;Copied!&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div><p>当然也可以使用其他主题，在主题文档有较为详细的说明。</p><ul><li>Front-matter 页面头元素<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">--- 文章模板</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; time &#125;&#125;</span><br><span class="line">categories: [xx,xx]</span><br><span class="line">tags: </span><br><span class="line">comments: true</span><br><span class="line">lang: zh-CN</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&amp;emsp;&amp;emsp;</span><br><span class="line"> </span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="域名解析记录怎么填写"><a href="#域名解析记录怎么填写" class="headerlink" title="域名解析记录怎么填写"></a>域名解析记录怎么填写</h3><h4 id="解析记录"><a href="#解析记录" class="headerlink" title="解析记录"></a>解析记录</h4><p>顾名思义，是提供DNS（域名服务器）的一些规则，你按要求填写服务器才知道要怎么解析你的域名。</p><p>A记录：IPV4解析 也就是你目标地址是192.168.1.1这样4组10进制的数。</p><table><thead><tr><th align="left">域名NAME</th><th align="left">TYPE</th><th align="left">TLL</th><th align="left">Target</th></tr></thead><tbody><tr><td align="left"><a href="http://www.example.com/">www.example.com</a></td><td align="left">A</td><td align="left">3600</td><td align="left">192.168.1.1</td></tr></tbody></table><ul><li><p>AAAA记录： IPV6解析 和IPV4一样的含义，区别在于目的地址变成了 </p><pre><code>       ABCD:EF01:2345:6789:ABCD:EF01:2345:6789的形式。</code></pre></li><li><p>CNAME记录：别名记录 和Liunx的alias差不多，由域名A跳转到域名B，域名B提供ip地址。</p></li><li><p>NS记录： 域名服务器记录 把域名解析交给其他域名服务商解析</p></li><li><p>MX记录：如果需要设置邮箱，让邮箱能收到邮件，就需要添加MX记录。</p></li></ul><p>关于通配符，有些域名服务商支持，有些不支持，就不展开来说了。</p><p>例如:我在freenom上DNS管理面板的配置<br><a href="https://imgtu.com/i/I3ayss"><img src="https://z3.ax1x.com/2021/11/07/I3ayss.jpg" alt="I3ayss.jpg"></a>由于这个网址的域名管理只能填完整域名，不能使用通配符，所以只能将这样<code>www.exampe.com</code>的网址填入NAME栏。</p><h3 id="解决md文件与hexo标签冲突"><a href="#解决md文件与hexo标签冲突" class="headerlink" title="解决md文件与hexo标签冲突"></a>解决md文件与hexo标签冲突</h3><p>在md文件里学习写hexo标签时，用到了多个hexo标签嵌套，使用<code>hexo generate</code>生成 ，突然发现报错。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Template render error: </span><br></pre></td></tr></table></figure><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>网上一查才发现原来是markdown语法与hexo标签冲突了：<br>md文件就按md形式解析,从而导致了无法正确渲染hexo标签</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ol><li><p>修改md文件内容<br>使用以下代码将冲突段嵌套在里面<br>` </p><p><code> 使用</code>hexo generate`后，倒是正常通过，但是hexo标签并没生效</p></li><li><p>修改nunjucks模块代码<br>找到模块地址，修改相应js文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_modules/nunjucks/src/lexer.js</span><br></pre></td></tr></table></figure><p>找到以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var VARIABLE_START = &#x27;&#123;&#123;&#x27;;</span><br><span class="line">var VARIABLE_END = &#x27;&#125;&#125;&#x27;;</span><br></pre></td></tr></table></figure><p>修改代码为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var VARIABLE_START = &#x27;&#123;$&#x27;;</span><br><span class="line">var VARIABLE_END = &#x27;$&#125;&#x27;;</span><br></pre></td></tr></table></figure><p><del>但是修改后还是报错，遂作罢（bushi）</del></p></li><li><p>加一点小细节  （最终解决方法）<br>之后，我突然想到去已经建好stallar主题博客的GitHub仓库康康，将我写的md文件和他的一观察，才发现只是缺失一点小细节：在hexo标签中必须要有内容，而且<strong>一般md语法与hexo标签要用换行将它们区分开</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs %&#125;</span><br><span class="line">&lt;!-- tab a --&gt;</span><br><span class="line">内容</span><br><span class="line">&lt;!-- tab b --&gt;</span><br><span class="line">内容</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;emsp;&amp;emsp;&lt;/p&gt;
&lt;p&gt;初探GitHubPage+hexo搭建博客&lt;/p&gt;</summary>
    
    
    
    <category term="解决方案" scheme="http://mika-7.github.io/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
    
    <category term="hexo" scheme="http://mika-7.github.io/tags/hexo/"/>
    
    <category term="stellar" scheme="http://mika-7.github.io/tags/stellar/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://mika-7.github.io/2021/11/05/hello-world/"/>
    <id>http://mika-7.github.io/2021/11/05/hello-world/</id>
    <published>2021-11-05T06:34:17.567Z</published>
    <updated>2021-11-10T10:14:09.503Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
